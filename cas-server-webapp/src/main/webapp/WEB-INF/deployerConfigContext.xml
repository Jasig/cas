<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to Jasig under one or more contributor license
    agreements. See the NOTICE file distributed with this work
    for additional information regarding copyright ownership.
    Jasig licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file
    except in compliance with the License.  You may obtain a
    copy of the License at the following location:

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<!--
	| deployerConfigContext.xml centralizes into one file some of the declarative configuration that
	| all CAS deployers will need to modify.
	|
	| This file declares some of the Spring-managed JavaBeans that make up a CAS deployment.  
	| The beans declared in this file are instantiated at context initialization time by the Spring 
	| ContextLoaderListener declared in web.xml.  It finds this file because this
	| file is among those declared in the context parameter "contextConfigLocation".
	|
	| By far the most common change you will need to make in this file is to change the last bean
	| declaration to replace the default SimpleTestUsernamePasswordAuthenticationHandler with
	| one implementing your approach for authenticating usernames and passwords.
	+-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:sec="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">
	<!--
	  | The authentication manager authenticates one or more credentials and transforms them into a single principal and
	  | related metadata about the authentication event (timestamp, authentication failures, warnings).
	  | Authentication managers are the primary point for defining authentication policy.
	  | Two implementations ship with CAS:
	  |  1. AnyAuthenticationManager - authentication is successful if ANY credential is successfully authenticated
	  |                                and transformed into a principal
	  |  2. AllAuthenticationManager - authentication is successful if an only if ALL credentials are successfully
	  |                                authenticated and transformed into a principal
	  |
		+-->
	<bean id="authenticationManager" class="org.jasig.cas.authentication.AnyAuthenticationManger">
    <!--
      | Define a map of authentication handlers to principal resolvers.
      | The order of handlers here determines the order in which they will be tried when a supported credential
      | is found. For each handler that successfully authenticates a credential, the corresponding resolver is
      | used to transform the credential into a principal. An entry is required for every type of credential that
      | is intended to authenticate to CAS.
      +-->
    <constructor-arg>
      <map>
        <entry key-ref="usernamePasswordAuthenticationHandler" value-ref="usernamePasswordPrincipalResolver" />
        <entry key-ref="serviceAuthenticationHandler" value-ref="servicePrincipalResolver" />
      </map>
    </constructor-arg>

		<property name="authenticationMetaDataPopulators">
		   <list>
         <bean class="org.jasig.cas.authentication.support.SamlAuthenticationMetaDataPopulator" />
         <!-- The following bean is required for ClearPass support -->
         <!--
		     <bean class="org.jasig.cas.extension.clearpass.CacheCredentialsMetaDataPopulator">
		        <constructor-arg index="0" ref="credentialsCache" />
		     </bean>
		     -->
		   </list>
		</property>
	</bean>

  <!--
    | This is the authentication handler declaration that every CAS deployer will need to change before deploying CAS
    | into production.  The default SimpleTestUsernamePasswordAuthenticationHandler authenticates UsernamePasswordCredential
    | where the username equals the password.  You will need to replace this with an AuthenticationHandler that implements your
    | local authentication strategy.  You might accomplish this by coding a new such handler and declaring
    | edu.someschool.its.cas.MySpecialHandler here, or you might use one of the handlers provided in the adaptors modules.
    +-->
  <bean id="usernamePasswordAuthenticationHandler"
      class="org.jasig.cas.authentication.SimpleTestUsernamePasswordAuthenticationHandler" />

  <!--
    | UsernamePasswordPrincipalResolver supports the UsernamePasswordCredential that we use for /login
    | by default and produces SimplePrincipal instances conveying the username from the credential.
    |
    | If you've changed your LoginFormAction to use credential other than UsernamePasswordCredential then you will also
    | need to change this bean declaration (or add additional declarations to the authenticationManager bean)
    | to declare a PrincipalResolver that supports the Credential you are using.
    +-->
  <bean id="usernamePasswordPrincipalResolver"
        class="org.jasig.cas.authentication.principal.UsernamePasswordPrincipalResolver"
        p:attributeRepository-ref="attributeRepository" />

  <!--
    | This is the authentication handler that authenticates services by means of callback via SSL, thereby validating
    | a server side SSL certificate.
    +-->
  <bean id="serviceAuthenticationHandler"
        class="org.jasig.cas.authentication.HttpBasedServiceCredentialsAuthenticationHandler"
        p:httpClient-ref="httpClient" />

  <!--
    | HttpBasedServicePrincipalResolver supports HttpBasedCredentials.  It supports the CAS 2.0 approach of
    | authenticating services by SSL callback, extracting the callback URL from the Credential and representing it as a
    | SimpleService identified by that callback URL.
    |
    | If you are representing services by something more or other than an HTTPS URL whereat they are able to
    | receive a proxy callback, you will need to change this bean declaration (or add additional declarations).
    +-->
  <bean id="servicePrincipalResolver"
        class="org.jasig.cas.authentication.service.HttpBasedServicePrincipalResolver" />

	<!-- 
	Bean that defines the attributes that a service may return.  This example uses the Stub/Mock version.  A real implementation
	may go against a database or LDAP server.  The id should remain "attributeRepository" though.
	 -->
	<bean id="attributeRepository"
		class="org.jasig.services.persondir.support.StubPersonAttributeDao">
		<property name="backingMap">
			<map>
				<entry key="uid" value="uid" />
				<entry key="eduPersonAffiliation" value="eduPersonAffiliation" /> 
				<entry key="groupMembership" value="groupMembership" />
			</map>
		</property>
	</bean>
	
	<!-- 
	Sample, in-memory data store for the ServiceRegistry. A real implementation
	would probably want to replace this with the JPA-backed ServiceRegistry DAO
	The name of this bean should remain "serviceRegistryDao".
	 -->
	<bean
		id="serviceRegistryDao"
        class="org.jasig.cas.services.InMemoryServiceRegistryDaoImpl">
            <property name="registeredServices">
                <list>
                    <bean class="org.jasig.cas.services.RegexRegisteredService">
                        <property name="id" value="0" />
                        <property name="name" value="HTTP and IMAP" />
                        <property name="description" value="Allows HTTP(S) and IMAP(S) protocols" />
                        <property name="serviceId" value="^(https?|imaps?)://.*" />
                        <property name="evaluationOrder" value="10000001" />
                    </bean>
                    <!--
                    Use the following definition instead of the above to further restrict access
                    to services within your domain (including subdomains).
                    Note that example.com must be replaced with the domain you wish to permit.
                    -->
                    <!--
                    <bean class="org.jasig.cas.services.RegexRegisteredService">
                        <property name="id" value="1" />
                        <property name="name" value="HTTP and IMAP on example.com" />
                        <property name="description" value="Allows HTTP(S) and IMAP(S) protocols on example.com" />
                        <property name="serviceId" value="^(https?|imaps?)://([A-Za-z0-9_-]+\.)*example\.com/.*" />
                        <property name="evaluationOrder" value="0" />
                    </bean>
                    -->
                </list>
            </property>
        </bean>

  <bean id="auditTrailManager" class="com.github.inspektr.audit.support.Slf4jLoggingAuditTrailManager" />
  
  <bean id="healthCheckMonitor" class="org.jasig.cas.monitor.HealthCheckMonitor">
    <property name="monitors">
      <list>
        <bean class="org.jasig.cas.monitor.MemoryMonitor"
            p:freeMemoryWarnThreshold="10" />
        <!--
          NOTE
          The following ticket registries support SessionMonitor:
            * DefaultTicketRegistry
            * JpaTicketRegistry
          Remove this monitor if you use an unsupported registry.
        -->
        <bean class="org.jasig.cas.monitor.SessionMonitor"
            p:ticketRegistry-ref="ticketRegistry"
            p:serviceTicketCountWarnThreshold="5000"
            p:sessionCountWarnThreshold="100000" />
      </list>
    </property>
  </bean>
</beans>
