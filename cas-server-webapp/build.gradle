apply plugin: 'war'
apply plugin: 'spring-boot'

apply from: '../gradle/node.gradle'

description = 'Apereo CAS Web Application'

sourceSets {
    main {
        resources {
            srcDir "${project.buildDir}/generated-src/main/resources"
        }
    }
}

javadoc {
    enabled false
}

war {
    manifest {
        attributes("Implementation-Title": project.name,
                "Implementation-Vendor": project.group,
                "Created-By": project.group,
                "Implementation-Date": java.time.ZonedDateTime.now(),
                "Implementation-Version": project.version)
    }
    from "${project.buildDir}/generated-src/main/resources", { into "WEB-INF/classes" }
}

bootRun {
    addResources = true
    jvmArgs = ["-Xrunjdwp:transport=dt_socket,address=5000,server=y,suspend=n"]
    systemProperties = System.properties
}

springBoot  {
    mainClass = 'org.apereo.cas.web.CasWebApplication'
}

bootRepackage {
    mainClass = 'org.apereo.cas.web.CasWebApplication'
}

dependencies {
    compile project(':cas-server-core')
    compile project(':cas-server-core-monitor')
    compile project(':cas-server-core-authentication')
    compile project(':cas-server-core-services')
    compile project(':cas-server-core-logout')
    compile project(':cas-server-core-audit')
    compile project(':cas-server-core-logging')
    compile project(':cas-server-core-tickets')
    compile project(':cas-server-core-web')
    compile project(':cas-server-core-validation')
    compile project(':cas-server-core-util')
    compile project(':cas-server-webapp-init')
    compile project(':cas-server-webapp-throttle')
    compile project(':cas-server-webapp-actions')
    compile project(':cas-server-webapp-cookie')
    compile project(':cas-server-webapp-reports')
    compile project(':cas-server-webapp-themes')
    compile project(':cas-server-webapp-config')
    compile project(':cas-server-webapp-validation')

    providedRuntime libraries.springboottomcat
    compile libraries.pac4j
    compile libraries.springcloud
    compile libraries.springboot
    compile libraries.thmyeleaf
    runtime libraries.groovy
    compile libraries.spring
    runtime libraries.cassecurityfilter
    runtime libraries.metrics
    runtime libraries.hibernate
    runtime libraries.bouncycastle
}

npm_run {
    args = [
            'gulp',
            '--',
            'sass',
            "--gulpfile", "${project.file('gulpfile.js')}",
            "--cwd", "${project.buildDir}",
            "--sassPath", "${project.file('src/main/resources/static/sass')}",
            "--npmPath", "${project.buildDir}/node_modules",
            "--cssPath", "${project.buildDir}/generated-src/main/resources/static/css"
    ]
}

tasks.npm_install.inputs.file(project.file('package.json'))

tasks.npm_run.dependsOn 'npm_install'
tasks.npm_run.inputs.dir(project.file('src/main/resources/static/sass'))
tasks.npm_run.inputs.file(project.file('gulpfile.js'))
tasks.npm_run.outputs.dir("${project.buildDir}/generated-src/main/resources/static/css")
tasks.npm_run.outputs.upToDateWhen { false }